import pyttsx3
import os
import requests  # For making requests to the LLaMA API
from manim import *

def generate_explanation_and_prompts(concept):
    # Call LLaMA API to generate the explanation and prompts
    response = requests.post("YOUR_LLAMA_API_ENDPOINT", json={"input": concept})
    data = response.json()
   
    # Extract explanation and prompts from the response
    explanation = data["explanation"]
    prompts = data["prompts"]
   
    return explanation, prompts

def generate_audio_segments(explanation):
    engine = pyttsx3.init()
   
    # Split the explanation into segments for audio generation
    segments = explanation.split("\n")  # You might want to refine this
    audio_files = {}
   
    output_dir = './audio_segments'
    os.makedirs(output_dir, exist_ok=True)

    for i, segment in enumerate(segments):
        audio_file_path = os.path.join(output_dir, f"segment_{i}.mp3")
        engine.save_to_file(segment, audio_file_path)
        audio_files[f"segment_{i}"] = audio_file_path

    engine.runAndWait()
    return audio_files

def create_manim_script(prompts, audio_files):
    # Create a Manim script based on prompts and audio file paths
    manim_script = f"""
from manim import *

class ConceptScene(Scene):
    def construct(self):
        # Create visual elements for illustrating the concept
        circle_a = Circle(color=BLUE, fill_opacity=0.5).shift(LEFT)
        circle_b = Circle(color=GREEN, fill_opacity=0.5).shift(RIGHT)

        # Create the intersection area or general overlapping area
        intersection_area = Circle(color=LIGHT_BROWN, fill_opacity=0.3).shift(ORIGIN)

        # Create text labels
        label_a = Tex("Group A").next_to(circle_a, UP)
        label_b = Tex("Group B").next_to(circle_b, UP)
        intersection_label = Tex("Overlap").next_to(intersection_area, DOWN)

        # Animate circles and labels
        self.play(Create(circle_a), Create(circle_b))
        self.play(Write(label_a), Write(label_b))
        self.play(FadeIn(intersection_area))
        self.play(Write(intersection_label))

        # Animate concept elements
        elements_a = ["A1", "A2", "A3"]
        elements_b = ["B1", "B2", "B3"]

        for name in elements_a:
            element = Tex(name).set_color(YELLOW)
            element.move_to(circle_a.get_center() + UP * (elements_a.index(name) - 1) * 0.5)
            self.play(FadeIn(element), MoveToTarget(element, circle_a.get_center()))

        for name in elements_b:
            element = Tex(name).set_color(RED)
            element.move_to(circle_b.get_center() + UP * (elements_b.index(name) - 1) * 0.5)
            self.play(FadeIn(element), MoveToTarget(element, circle_b.get_center()))

        # Play audio segments
        audio_files = {i: "{path}" for i, path in audio_files.items()}
        for i in range(len(audio_files)):
            self.add_sound(audio_files[i])
            self.wait(3)  # Adjust wait time according to audio length

        # Keep the final frame
        self.wait(2)

if __name__ == "__main__":
    from manim import manim_main
    manim_main.main()
"""
    # Save the script
    with open("concept_scene.py", "w") as f:
        f.write(manim_script)

def render_video():
    os.system("manim -pql concept_scene.py ConceptScene")

def main(concept):
    explanation, prompts = generate_explanation_and_prompts(concept)
    audio_files = generate_audio_segments(explanation)
    create_manim_script(prompts, audio_files)
    render_video()

if __name__ == "__main__":
    main("Enter a concept")
